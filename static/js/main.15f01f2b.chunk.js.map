{"version":3,"sources":["assets/noPosterSmall.png","Components/Header.js","api.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","api","axios","create","baseURL","params","api_key","language","moviesApi","get","id","append_to_response","term","query","encodeURIComponent","tvApi","Container","div","Title","span","Grid","Section","title","children","role","aria-label","Text","color","Message","text","prototype","PropTypes","string","isRequired","Image","bgUrl","Rating","ImageContainer","Year","Poster","imageUrl","number","rating","year","isMovie","require","default","length","substring","bool","HomePresenter","nowPlaying","popular","upcoming","loading","error","Loader","map","movie","original_title","poster_path","vote_average","release_date","HomeContainer","state","a","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","componentDidMount","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","DetailPresenter","result","propTypes","object","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.15f01f2b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Item = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${props => (props.current ? \"#3498db\" : \"transparent\")};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <List>\r\n      <Item current={pathname === \"/\"}>\r\n        <SLink to=\"/\">Movies</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/tv\"}>\r\n        <SLink to=\"/tv\">TV</SLink>\r\n      </Item>\r\n      <Item current={pathname === \"/search\"}>\r\n        <SLink to=\"/search\">Search</SLink>\r\n      </Item>\r\n    </List>\r\n  </Header>\r\n));","import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: {\r\n    api_key: \"e77b3aca88f9e5a049049a9293da06d8\",\r\n    language: \"en-US\"\r\n  }\r\n});\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: id =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"),\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: id =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\"\r\n      }\r\n    }),\r\n  search: term =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};","/**\r\n * Section\r\n * \r\n * Title: Section\r\n * Description: 어떤 경로로 갈 것인지 정하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\n/* Set Styled */\r\nconst Container = styled.div`\r\n    :not(:last-child) {\r\n        margin-bottom: 50px;\r\n    }\r\n`\r\nconst Title = styled.span`\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n`\r\nconst Grid = styled.div`\r\n    margin-top: 25px;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, 125px);\r\n    grid-gap: 25px;\r\n`\r\n\r\n// children: 예약된 React-Prop\r\nconst Section = ({ title, children }) => (\r\n    <Container>\r\n        <Title>{title}</Title>\r\n        <Grid>{children}</Grid>\r\n    </Container>\r\n)\r\n\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.arrayOf(PropTypes.node),\r\n        PropTypes.node\r\n    ])\r\n}\r\n\r\nexport default Section","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n    font-size: 28px;\r\n    margin-top: 20px;\r\n`\r\n\r\nexport default () => (\r\n    <Container>\r\n        <span role=\"img\" aria-label=\"Loading\">\r\n        ⏰\r\n        </span>\r\n    </Container>\r\n)","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    width: 100vw;\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\nconst Text = styled.span`\r\n    color: ${props => props.color};\r\n    font-weight: 600;\r\n`\r\n\r\nconst Message = ({text, color}) => (\r\n    <Container>\r\n        <Text color={color}>{text}</Text>\r\n    </Container>\r\n)\r\nMessage.prototype = {\r\n    text: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Container = styled.div`\r\n    font-size: 12px;\r\n`\r\nconst Image = styled.div`\r\n    background-image: url(${props => props.bgUrl});\r\n    height: 180px;\r\n    background-size: cover;\r\n    border-radius: 4px;\r\n    background-position: center center;\r\n    transition: opacity 0.1s linear;\r\n`\r\nconst Rating = styled.span`\r\n    bottom: 5px;\r\n    right: 5px;\r\n    position: absolute;\r\n    opacity: 0;\r\n`\r\nconst ImageContainer = styled.div`\r\n    margin-bottom: 5px;\r\n    position: relative;\r\n    &:hover {\r\n        ${Image} {\r\n            opacity: .3;\r\n        }\r\n        ${Rating} {\r\n            opacity: 1;\r\n        }\r\n    }\r\n`\r\nconst Title = styled.span`\r\n    display: block;\r\n    margin-bottom: 3px;\r\n`\r\nconst Year = styled.span`\r\n    font-size: 10px;\r\n    color: rgba(255,255,255,.5);\r\n`\r\n\r\nconst Poster = ({id, number, imageUrl, title, rating, year, isMovie = false}) => (\r\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n        <Container>\r\n            <ImageContainer>\r\n                <Image \r\n                    bgUrl={\r\n                        imageUrl \r\n                            ? `https://image.tmdb.org/t/p/w300${imageUrl}` \r\n                            : require(\"../assets/noPosterSmall.png\").default\r\n                    }\r\n                />\r\n                <Rating>\r\n                    <span role=\"img\" aria-label=\"rating\">\r\n                        ⭐\r\n                    </span>{\" \"}\r\n                    {rating}/10\r\n                </Rating>\r\n            </ImageContainer>\r\n            <Title>{title.length > 18 ? `${title.substring(0,18)}...`:title}</Title>\r\n            <Year>{year}</Year>\r\n        </Container>\r\n    </Link>\r\n)\r\n\r\nPoster.prototype = {\r\n    id: PropTypes.number.isRequired,\r\n    imageUrl: PropTypes.string,\r\n    title: PropTypes.string.isRequired,\r\n    rating: PropTypes.number,\r\n    year: PropTypes.string,\r\n    isMovie: PropTypes.bool\r\n}\r\n\r\nexport default Poster","/**\r\n * HomePresenter\r\n * \r\n * Title: HomePresenter\r\n * Description: Home 화면을 담당하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport Section from 'Components/Section'\r\nimport Loader from 'Components/Loader'\r\nimport Message from 'Components/Message'\r\nimport Poster from 'Components/Poster'\r\n\r\nconst Container = styled.div`\r\n  padding: 0px 20px;\r\n`\r\n\r\nconst HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) => \r\nloading ? \r\n(<Loader />) : (  \r\n    <Container>\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n            <Section title=\"Now Playing\">\r\n                { nowPlaying.map(movie => (\r\n                    <Poster \r\n                        key={movie.id} \r\n                        id={movie.id}\r\n                        title={movie.original_title} \r\n                        imageUrl={movie.poster_path}\r\n                        rating={movie.vote_average}\r\n                        year={movie.release_date \r\n                                && movie.release_date.substring(0,4)}\r\n                        isMovie={true}\r\n                    />\r\n                ))}\r\n            </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n            <Section title=\"Upcoming Movies\">\r\n                { upcoming.map(movie => (\r\n                    <Poster \r\n                        key={movie.id} \r\n                        id={movie.id}\r\n                        title={movie.original_title} \r\n                        imageUrl={movie.poster_path}\r\n                        rating={movie.vote_average}\r\n                        year={movie.release_date \r\n                                && movie.release_date.substring(0,4)}\r\n                        isMovie={true}\r\n                    />\r\n                ))}\r\n            </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n            <Section title=\"Popular Movies\">\r\n                { popular.map(movie => (\r\n                    <Poster \r\n                        key={movie.id} \r\n                        id={movie.id}\r\n                        title={movie.original_title} \r\n                        imageUrl={movie.poster_path}\r\n                        rating={movie.vote_average}\r\n                        year={movie.release_date \r\n                                && movie.release_date.substring(0,4)}\r\n                        isMovie={true}\r\n                    />\r\n                ))}\r\n            </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n    </Container>\r\n)\r\n\r\nHomePresenter.propTypes = {\r\n    nowPlaying: PropTypes.array,\r\n    upcoming: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n \r\nexport default HomePresenter","import HomeContainer from './HomeContainer'\r\n\r\nexport default HomeContainer","/**\r\n * HomeContainer\r\n * \r\n * Title: HomeContainer\r\n * Description: Home에 관련한 데이터를 사용하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport { moviesApi } from 'api'\r\nimport React from 'react'\r\nimport HomePresenter from './HomePresenter'\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        nowPlaying: null,\r\n        upcoming: null,\r\n        popular: null,\r\n        error: null,\r\n        loading: true\r\n    }\r\n\r\n    // 컴포넌트가 마운트 될 때 nowPlaying,upcoming,popular를 찾음 (다 찾을 때 까진 대기해야됨)\r\n    async componentDidMount() {\r\n        // 전체 API를 호출하거나 각각의 분리된 함수로 호출\r\n        try {\r\n            // await: 잠시 기다려라는 뜻 (성공/실패는 모르고 일단 끝날때까지 기다려라)\r\n            // api를 가져올 때 시간이 걸리므로(데이터가 많아서) 대기하는 것\r\n            const {\r\n                data: { results: nowPlaying }\r\n            } = await moviesApi.nowPlaying()\r\n            const {\r\n                data: { results: upcoming }\r\n            } = await moviesApi.upcoming()\r\n            const {\r\n                data: { results: popular }\r\n            } = await moviesApi.popular()\r\n\r\n            // 일부러 에러주기\r\n            // throw Error()\r\n\r\n            this.setState({\r\n                nowPlaying: nowPlaying,\r\n                upcoming: upcoming,\r\n                popular: popular\r\n            })\r\n\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find movies information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                // 어떠한 상황이건 loading값은 false 처리되어\r\n                // error이건 data건 보여줄 것이다.\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { nowPlaying, upcoming, popular, error, loading } = this.state\r\n        return (\r\n            <HomePresenter \r\n                nowPlaying={nowPlaying}\r\n                upcoming={upcoming}\r\n                popular={popular}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * PropTypes의 종류\r\n * \r\n * array: 배열\r\n * arrayOf: 특정 PropType으로 이루어진 배열\r\n * bool: 논리 (true OR false)\r\n * func: 함수\r\n * number: 숫자\r\n * object: 객체\r\n * string: 문자열\r\n * symbol: ES6의 Symbol\r\n * node: Rendering 가능한 모든 것(숫자, 문자열, JSX)\r\n * instanceOf: 특정 클래스의 인스턴스 (ex: instanceOf(Class))\r\n * oneOf(['dog', 'cat']): 주어진 배열 요소 중 하나\r\n * oneOfType([React.PropTypes.string, PropTypes.number]): 주어진 배열 안의 타입 중 하나\r\n * objectOf(React.PropTypes.number): 객체의 모든 키 값이 인자로 주어진 PropType인 객체\r\n * shape({ name: PropTypes.string, num: PropTypes.number }): 주어진 스키마를 가진 객체\r\n * any: 아무것이나\r\n * \r\n */","/**\r\n * TVPresenter\r\n * \r\n * Title: TVPresenter\r\n * Description: TV 화면을 담당하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport Section from 'Components/Section'\r\nimport Loader from 'Components/Loader'\r\nimport Message from 'Components/Message'\r\nimport Poster from 'Components/Poster'\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n`\r\n\r\nconst TVPresenter = ({topRated,popular,airingToday,error,loading}) => \r\nloading ? \r\n(<Loader />) : (\r\n    <Container>\r\n        {topRated && topRated.length > 0 && (\r\n            <Section title=\"Top Rated Shows\">\r\n                {topRated.map(show => \r\n                    <Poster \r\n                        key={show.id}\r\n                        id={show.id}\r\n                        imageUrl={show.poster_path}\r\n                        title={show.original_name}\r\n                        rating={show.vote_average}\r\n                        year={show.first_air_date\r\n                            && show.first_air_date.substring(0, 4)}\r\n                    />    \r\n                )}\r\n            </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n            <Section title=\"Popular Shows\">\r\n                {popular.map(show => \r\n                    <Poster \r\n                        key={show.id}\r\n                        id={show.id}\r\n                        imageUrl={show.poster_path}\r\n                        title={show.original_name}\r\n                        rating={show.vote_average}\r\n                        year={show.first_air_date\r\n                            && show.first_air_date.substring(0, 4)}\r\n                    />    \r\n                )}\r\n            </Section>\r\n        )}\r\n        {airingToday && airingToday.length > 0 && (\r\n            <Section title=\"Airing Today\">\r\n                {airingToday.map(show => \r\n                    <Poster \r\n                        key={show.id}\r\n                        id={show.id}\r\n                        imageUrl={show.poster_path}\r\n                        title={show.original_name}\r\n                        rating={show.vote_average}\r\n                        year={show.first_air_date\r\n                            && show.first_air_date.substring(0, 4)}\r\n                    />    \r\n                )}\r\n            </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n    </Container>\r\n)\r\n\r\nTVPresenter.propTypes = {\r\n    topRated: PropTypes.array,\r\n    popular: PropTypes.array,\r\n    airingToday: PropTypes.array,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default TVPresenter","import TVContainer from './TVContainer'\r\n\r\nexport default TVContainer","/**\r\n * TVContainer\r\n * \r\n * Title: TVContainer\r\n * Description: TV에 관련한 데이터를 사용하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport { tvApi } from 'api'\r\nimport React from 'react'\r\nimport TVPresenter from './TVPresenter'\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        topRated: null,\r\n        popular: null,\r\n        airingToday: null,\r\n        error: null,\r\n        loading: true\r\n    }\r\n\r\n    // Equals `async componentDidMount...`\r\n    componentDidMount = async() => {\r\n        \r\n        try {\r\n            const {\r\n                data: { results: topRated }\r\n            } = await tvApi.topRated()\r\n            const {\r\n                data: { results: popular }\r\n            } = await tvApi.popular()\r\n            const {\r\n                data: { results: airingToday }\r\n            } = await tvApi.airingToday()\r\n\r\n            this.setState({\r\n                topRated: topRated,\r\n                popular: popular,\r\n                airingToday: airingToday\r\n            })\r\n\r\n        } catch {\r\n            this.setState({\r\n                error: \"Can't find TV information.\"\r\n            })\r\n        } finally {\r\n            this.setState({\r\n                // 어떠한 상황이건 loading값은 false 처리되어\r\n                // error이건 data건 보여줄 것이다.\r\n                loading: false\r\n            })\r\n        }\r\n    }\r\n     \r\n    render() {\r\n        const { topRated, popular, airingToday, error, loading } = this.state\r\n        \r\n        return (\r\n            <TVPresenter \r\n                topRated={topRated} \r\n                popular={popular} \r\n                airingToday={airingToday} \r\n                error={error} \r\n                loading={loading}\r\n            />\r\n        )\r\n    }\r\n}","/**\r\n * SearchPresenter\r\n * \r\n * Title: SearchPresenter\r\n * Description: Search 화면을 담당하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport Loader from 'Components/Loader'\r\nimport Section from 'Components/Section'\r\nimport Message from 'Components/Message'\r\nimport Poster from 'Components/Poster'\r\n\r\nconst Container = styled.div`\r\n    padding: 0px 20px;\r\n`\r\nconst Form = styled.form`\r\n    margin-bottom: 50px;\r\n    width: 100%;\r\n`\r\nconst Input = styled.input`\r\n    all: unset;\r\n    font-size: 28px;\r\n    width: 100%;\r\n`\r\nconst SearchPresenter = (\r\n    {\r\n        movieResults,\r\n        tvResults,\r\n        error,\r\n        loading,\r\n        searchTerm,\r\n        handleSubmit,\r\n        updateTerm\r\n    }\r\n) => (\r\n    <Container>\r\n        <Form onSubmit={handleSubmit}>\r\n            <Input placeholder=\"Search Movies or TV Shows...\" value={searchTerm} onChange={updateTerm}/>\r\n        </Form>\r\n        {loading ? \r\n            (<Loader />) : \r\n            (<>\r\n                {movieResults && movieResults.length > 0 && (\r\n                    <Section title=\"Movie Results\">\r\n                        {movieResults.map(movie => (\r\n                            <Poster\r\n                                key={movie.id}\r\n                                id={movie.id}\r\n                                imageUrl={movie.poster_path}\r\n                                title={movie.original_title}\r\n                                rating={movie.vote_average}\r\n                                year={movie.release_date \r\n                                        && movie.release_date.substring(0, 4)}\r\n                                isMovie={true}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {tvResults && tvResults.length > 0 && (\r\n                    <Section title=\"TV Show Results\">\r\n                        {tvResults.map(show => (\r\n                            <Poster \r\n                                key={show.id}\r\n                                id={show.id}\r\n                                imageUrl={show.poster_path}\r\n                                title={show.original_name}\r\n                                rating={show.vote_average}\r\n                                year={show.first_air_date\r\n                                        && show.first_air_date.substring(0, 4)}\r\n                            />\r\n                        ))}\r\n                    </Section>\r\n                )}\r\n                {error && <Message color=\"#e74c3c\" text={error} />}\r\n                {   tvResults && \r\n                    movieResults && \r\n                    tvResults.length === 0 && \r\n                    movieResults.length === 0 && (\r\n                        <Message text=\"Nothing Found\" color=\"#a5a6ff\" />\r\n                )}\r\n            </>)\r\n        }\r\n    </Container>\r\n)\r\n\r\nSearchPresenter.propTypes = {\r\n    movieResults: PropTypes.array,\r\n    tvResults: PropTypes.array,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired,\r\n    searchTerm: PropTypes.string,\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    updateTerm: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SearchPresenter","import SearchContainer from './SearchContainer'\r\n\r\nexport default SearchContainer","/**\r\n * SearchContainer\r\n * \r\n * Title: SearchContainer\r\n * Description: Search에 관련한 데이터를 사용하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport { moviesApi, tvApi } from 'api'\r\nimport React from 'react'\r\nimport SearchPresenter from './SearchPresenter'\r\n\r\nexport default class extends React.Component {\r\n    state = {\r\n        movieResults: null,\r\n        tvResults: null,\r\n        error: null,\r\n        loading: false,\r\n        searchTerm: \"\"\r\n    }\r\n\r\n    // #5.4 현재 handleSubmit 할 수 있는 조건이 없으므로 강제 실행 (시뮬레이션)\r\n    // componentDidMount() {\r\n    //     this.handleSubmit()\r\n    // }\r\n\r\n    // handleSumbit : 누군가가 button click 했을 경우, 검색어 입력\r\n    handleSubmit = (event) => {\r\n        // preventDefault(): Form Event를 동작하지 못하게 만든다\r\n        event.preventDefault()\r\n        const { searchTerm } = this.state\r\n        if (searchTerm !== \"\") {\r\n            this.searchByTerm(searchTerm)\r\n        }\r\n    }\r\n\r\n    // updateTerm: \r\n    updateTerm = (event) => {\r\n        const { \r\n            target: {value} \r\n        } = event\r\n        this.setState({\r\n            searchTerm:value\r\n        })\r\n        \r\n    }\r\n\r\n    searchByTerm = async () => {\r\n        const { searchTerm } = this.state\r\n\r\n        try {\r\n            const { \r\n                data: { results: movieResults } \r\n            } = await moviesApi.search(searchTerm)\r\n            const { \r\n                data: { results: tvResults } \r\n            } = await tvApi.search(searchTerm)\r\n            this.setState({\r\n                movieResults,\r\n                tvResults\r\n            })\r\n            this.setState({ loading: true })\r\n        } catch {\r\n            this.setState({ error: \"Can't find results...\" })\r\n        } finally {\r\n            this.setState({ loading: false })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { movieResults, tvResults, searchTerm, error, loading } = this.state\r\n\r\n        return (\r\n            <SearchPresenter\r\n                movieResults={movieResults}\r\n                tvResults={tvResults}\r\n                searchTerm={searchTerm}\r\n                error={error}\r\n                loading={loading}\r\n                handleSubmit={this.handleSubmit}\r\n                updateTerm={this.updateTerm}\r\n            />\r\n        )\r\n    }\r\n}","/**\r\n * DetailPresenter\r\n * \r\n * Title: DetailPresenter\r\n * Description: Detail 화면을 담당하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n import React from 'react'\r\n import PropTypes from 'prop-types'\r\n import styled from 'styled-components'\r\n \r\n \r\nconst DetailPresenter = (\r\n    {\r\n        result,\r\n        error,\r\n        loading\r\n    }\r\n) => null;\r\n \r\nDetailPresenter.propTypes = {\r\n    result: PropTypes.object,\r\n    error: PropTypes.string,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n \r\nexport default DetailPresenter","import DetailContainer from './DetailContainer'\r\n\r\nexport default DetailContainer","/**\r\n * DetailContainer\r\n * \r\n * Title: DetailContainer\r\n * Description: Detail에 관련한 데이터를 사용하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport { moviesApi, tvApi } from 'api'\r\nimport React from 'react'\r\nimport DetailPresenter from './DetailPresenter'\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const {\r\n            location: {pathname}\r\n        } = props\r\n        this.state = {\r\n            result: null,\r\n            error: null,\r\n            loading: true,\r\n            isMovie: pathname.includes(\"/movie/\")\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        const {\r\n            match: {\r\n                params: { id }\r\n            },\r\n            history: { push }\r\n        } = this.props\r\n        const { isMovie } = this.state\r\n        const parsedId = parseInt(id) // 숫자로 변환\r\n\r\n        // 잘못된 주소의 경우 Home으로 보내줌(Detail은 숫자만 받음)\r\n        if (isNaN(parsedId)) {\r\n            // return을 해주는 이유: Home에서 API를 호출해야 하므로 Detail에서 Home으로 보내줌\r\n            return push(\"/\")\r\n        }\r\n\r\n        let result = null // movie OR show\r\n        try{\r\n            // Override result TV or Movie\r\n            if(isMovie) { // Movie\r\n                ({\r\n                    data: result\r\n                } = await moviesApi.movieDetail(parsedId))\r\n            } else { // TVshow\r\n                ({\r\n                    data: result\r\n                } = await tvApi.showDetail(parsedId))\r\n            }\r\n\r\n        } catch{\r\n            this.setState({ error: \"Can't find anything.\" })\r\n        } finally{\r\n            this.setState({ loading:false, result })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { result, error, loading } = this.state\r\n        \r\n        return (\r\n            <DetailPresenter\r\n                result={result}\r\n                error={error}\r\n                loading={loading}\r\n            />\r\n        )\r\n    }\r\n}\r\n","/**\r\n * Router\r\n * \r\n * Title: Router\r\n * Description: 어떤 경로로 갈 것인지 정하는 컴포넌트\r\n * Author: Langram-Jang\r\n * \r\n * Learn by Nomad Coders\r\n *  \r\n */\r\n\r\nimport React from 'react'\r\nimport { BrowserRouter as Router,\r\n         Route,\r\n         Redirect, \r\n         Switch \r\n} from 'react-router-dom'\r\nimport Header from 'Components/Header'\r\nimport Home from 'Routes/Home'\r\nimport TV from 'Routes/TV'\r\nimport Search from 'Routes/Search'\r\nimport Detail from 'Routes/Detail'\r\n\r\nexport default () => (\r\n    <Router>\r\n        <>\r\n            <Header />\r\n            <Switch>\r\n                <Route path='/' exact component={Home} />\r\n                <Route path='/tv' component={TV} />\r\n                <Route path='/search' component={Search} />.\r\n                <Route path='/movie/:id' component={Detail} />\r\n                <Route path='/show/:id' component={Detail} />\r\n                <Redirect from='*' to='/' />\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n)\r\n// Detail: /movie/12 OR /show/12\r\n/* \r\n * Route\r\n * >> exact: 정확히 해당 주소를 가지고있어야함 \r\n * >> composition : 두 개 이상의 Route를 동시에 렌더링 하는 방식\r\n * >> 디폴드로 Router는 모든 Route들에게 props를 준다.\r\n * \r\n * Redirect\r\n * from > to 주소로 이동시켜준다\r\n * \r\n * Switch\r\n * 주소를 한번만 실행시켜준다. \r\n * composition을 하게되면 한 개만 동작하므로 exact로 구분시켜줘야함\r\n */","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size:12px;\r\n        background-color:rgba(20, 20, 20, 1);\r\n        color:white;\r\n        padding-top:80px;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import React, { Component } from 'react'\r\nimport Router from 'Components/Router'\r\nimport GlobalStyles from \"Components/GlobalStyles\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n      return (\r\n        <>\r\n          <Router />\r\n          <GlobalStyles />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from 'Components/App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}